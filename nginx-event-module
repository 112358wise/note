
事件模块
事件处理框架所要解决的问题是如何收集、管理、分发事件，事件主要是网络事件和定时器事件。
=================

事件驱动机制/IO多路复用
epoll机制
epoll_create(): 产生一个epoll对象，返回指向该epoll对象的文件描述符
epoll_ctl(): 将感兴趣的文件描述符注册到epoll对象
epoll_wait(): 等待事件发生

调用epoll_create建立一个epoll对象（在epoll文件系统中给这个句柄分配资源）、调用epoll_ctl向epoll对象中添加这100万个连接的套接字、调用epoll_wait收集发生事件的连接。

调用epoll_create方法，linux内核会创建一个eventpoll结构体，包含两个成员双向链表rdllist和红黑树根节点rbr。rdllist保存通过epoll_wait返回给用户的满足条件的事件，rbr存储所有通过epoll_ctl添加到epoll中的事件。在epool中，对于每一个事件都会建立一个epitem结构体，rdllist和rbr就是基于epitem中的rdllink和rbn成员组织的。
==================

nginx把不同操作系统的IO模型抽象封装成ngx_event_module_t.actions中指定的钩子。
typedef struct {
    ngx_int_t  (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t  (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t  (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t  (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t  (*add_conn)(ngx_connection_t *c);
    ngx_int_t  (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);

    ngx_int_t  (*process_changes)(ngx_cycle_t *cycle, ngx_uint_t nowait);
    ngx_int_t  (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,
                   ngx_uint_t flags);

    ngx_int_t  (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);
    void       (*done)(ngx_cycle_t *cycle);
} ngx_event_actions_t;

typedef struct {
    ngx_str_t            *name;

    void                 *(*create_conf)(ngx_cycle_t *cycle);
    char                 *(*init_conf)(ngx_cycle_t *cycle, void *conf);

    ngx_event_actions_t     actions;
} ngx_event_module_t;

worker 初始化的时候会调用actions.init钩子初始化IO模型，比如在epoll的init钩子会创建epoll句柄和事件队列；之后worker就可以在监听套接口上添加对连接建立状态的监听事件，调用accept获取已连接套接口，在已连接套接口上添加对读写操作的监听事件，nginx会调用 actions.process_events钩子轮询和处理事件，轮询有超时设定。

==================

ngx_events_module

核心模块，它定义了一类新模块：事件模块。
功能：定义新的事件类型，定义每个事件模块都需要实现的ngx_event_module_t接口，管理事件模块生成的配置项结构体，解析事件类配置项等。
管理事件模块，配置项结构体指针的保存都是在ngx_events_block()中进行的。
static char *
ngx_events_block(ngx_conf_t *cf, ngx_command_t *cmd, void *conf)
{
    char                 *rv;
    void               ***ctx;
    ngx_uint_t            i;
    ngx_conf_t            pcf;
    ngx_event_module_t   *m;

    //（1）初始化所有事件模块的ctx_index序号
    ngx_event_max_module = 0;
    for (i = 0; ngx_modules[i]; i++) {
        if (ngx_modules[i]->type != NGX_EVENT_MODULE) {
            continue;
        }

        ngx_modules[i]->ctx_index = ngx_event_max_module++;
    }

    //（2）分配指针数组，存储所有事件模块生成的配置项结构体指针
    ctx = ngx_pcalloc(cf->pool, sizeof(void *));

    *ctx = ngx_pcalloc(cf->pool, ngx_event_max_module * sizeof(void *));

    *(void **) conf = ctx;

    //（3）调用所有事件模块的create_conf方法
    for (i = 0; ngx_modules[i]; i++) {
        if (ngx_modules[i]->type != NGX_EVENT_MODULE) {
            continue;
        }

        m = ngx_modules[i]->ctx;

        if (m->create_conf) {
            (*ctx)[ngx_modules[i]->ctx_index] = m->create_conf(cf->cycle);
        }
    }

    pcf = *cf;
    cf->ctx = ctx;
    cf->module_type = NGX_EVENT_MODULE;
    cf->cmd_type = NGX_EVENT_CONF;

    //（4）为所有事件模块解析配置文件
    rv = ngx_conf_parse(cf, NULL);

    //（5）调用所有事件模块的init_conf方法
    *cf = pcf;
    for (i = 0; ngx_modules[i]; i++) {
        if (ngx_modules[i]->type != NGX_EVENT_MODULE) {
            continue;
        }

        m = ngx_modules[i]->ctx;

        if (m->init_conf) {
            rv = m->init_conf(cf->cycle, (*ctx)[ngx_modules[i]->ctx_index]);
            if (rv != NGX_CONF_OK) {
                return rv;
            }
        }
    }

    return NGX_CONF_OK;
}

==================

ngx_event_core_module

事件类型模块，它在所有事件模块中的顺序是第一位的
功能：创建连接池（包括读写事件），决定使用哪种事件驱动机制以及初始化将要使用的事件模块。
它实现了ngx_event_module_init()和ngx_event_process_init()方法，nginx在fork出worker子进程前，会调用ngx_event_module_init()方法，fork出worker子进程后，每个worker子进程会在调用ngx_event_process_init()方法后进入正式的工作循环。
ngx_event_module_init()方法主要初始化了一些变量，比较简单，ngx_event_core_module模块在启动过程中的主要工作是在ngx_event_process_init()方法中进行的。
static ngx_int_t
ngx_event_process_init(ngx_cycle_t *cycle)
{
    ngx_uint_t           m, i, j;
    ngx_event_t         *rev, *wev;
    ngx_listening_t     *ls;
    ngx_connection_t    *c, *next;
    ngx_core_conf_t     *ccf;
    ngx_event_conf_t    *ecf;
    ngx_event_module_t  *module;

    ccf = (ngx_core_conf_t *) ngx_get_conf(cycle->conf_ctx, ngx_core_module);
    ecf = ngx_event_get_conf(cycle->conf_ctx, ngx_event_core_module);

    // 负载均衡锁
    if (ccf->master && ccf->worker_processes > 1 && ecf->accept_mutex) {
        ngx_use_accept_mutex = 1;
        ngx_accept_mutex_held = 0;
        ngx_accept_mutex_delay = ecf->accept_mutex_delay;

    } else {
        ngx_use_accept_mutex = 0;
    }

    // 初始化定时器
    if (ngx_event_timer_init(cycle->log) == NGX_ERROR) {
        return NGX_ERROR;
    }

    // 调用use配置项指定的事件驱动模块的init方法，进行事件模块的初始化
    for (m = 0; ngx_modules[m]; m++) {
        if (ngx_modules[m]->type != NGX_EVENT_MODULE) {
            continue;
        }

        if (ngx_modules[m]->ctx_index != ecf->use) {
            continue;
        }

        module = ngx_modules[m]->ctx;

        if (module->actions.init(cycle, ngx_timer_resolution) != NGX_OK) {
            /* fatal */
            exit(2);
        }

        break;
    }

#if !(NGX_WIN32)

    // 设置时间精度
    if (ngx_timer_resolution && !(ngx_event_flags & NGX_USE_TIMER_EVENT)) {
        struct sigaction  sa;
        struct itimerval  itv;

        ngx_memzero(&sa, sizeof(struct sigaction));
        sa.sa_handler = ngx_timer_signal_handler;
        sigemptyset(&sa.sa_mask);

        if (sigaction(SIGALRM, &sa, NULL) == -1) {
            return NGX_ERROR;
        }

        itv.it_interval.tv_sec = ngx_timer_resolution / 1000;
        itv.it_interval.tv_usec = (ngx_timer_resolution % 1000) * 1000;
        itv.it_value.tv_sec = ngx_timer_resolution / 1000;
        itv.it_value.tv_usec = (ngx_timer_resolution % 1000 ) * 1000;

        setitimer(ITIMER_REAL, &itv, NULL);
    }

    // 为ngx_cycle_t结构的files成员分配空间
    if (ngx_event_flags & NGX_USE_FD_EVENT) {
        struct rlimit  rlmt;

        if (getrlimit(RLIMIT_NOFILE, &rlmt) == -1) {
            return NGX_ERROR;
        }

        cycle->files_n = (ngx_uint_t) rlmt.rlim_cur;

        cycle->files = ngx_calloc(sizeof(ngx_connection_t *) * cycle->files_n,
                                  cycle->log);
    }

#endif

    // 预分配连接池
    cycle->connections =
        ngx_alloc(sizeof(ngx_connection_t) * cycle->connection_n, cycle->log);

    c = cycle->connections;

    // 预分配读事件池
    cycle->read_events = ngx_alloc(sizeof(ngx_event_t) * cycle->connection_n,
                                   cycle->log);

    rev = cycle->read_events;
    for (i = 0; i < cycle->connection_n; i++) {
        rev[i].closed = 1;
        rev[i].instance = 1;
    }

    // 预分配写事件池
    cycle->write_events = ngx_alloc(sizeof(ngx_event_t) * cycle->connection_n,
                                    cycle->log);

    wev = cycle->write_events;
    for (i = 0; i < cycle->connection_n; i++) {
        wev[i].closed = 1;
    }

    // 按照序号，将三个数组（连接池、读事件池和写事件池）对应的读写事件
    // 设置到每一个ngx_connection_t连接对象中，并将连接对象的data成员作为next指针串联成链表
    i = cycle->connection_n;
    next = NULL;
    do {
        i--;

        c[i].data = next;
        c[i].read = &cycle->read_events[i];
        c[i].write = &cycle->write_events[i];
        c[i].fd = (ngx_socket_t) -1;

        next = &c[i];
    } while (i);

    cycle->free_connections = next;
    cycle->free_connection_n = cycle->connection_n;

    // 为所有ngx_listening_t监听对象中的connection成员分配连接
    ls = cycle->listening.elts;
    for (i = 0; i < cycle->listening.nelts; i++) {

        c = ngx_get_connection(ls[i].fd, cycle->log);

        c->log = &ls[i].log;

        c->listening = &ls[i];
        ls[i].connection = c;

        rev = c->read;

        rev->log = c->log;
        rev->accept = 1;

        // 对监听端口的读事件设置处理方法为ngx_event_accept
        // 即在有新连接事件时，调用ngx_event_accept方法建立新连接
        rev->handler = ngx_event_accept; 

        if (ngx_use_accept_mutex) {
            continue;
        }

        // 将监听对象连接的读事件添加到事件驱动模块
        if (ngx_event_flags & NGX_USE_RTSIG_EVENT) {
            if (ngx_add_conn(c) == NGX_ERROR) {
                return NGX_ERROR;
            }

        } else {
            if (ngx_add_event(rev, NGX_READ_EVENT, 0) == NGX_ERROR) {
                return NGX_ERROR;
            }
        }

    }

    return NGX_OK;
}

==================

event结构

struct ngx_event_t {
    void            *data;             //通常指向ngx_connection_t连接对象

    unsigned         write:1;          //事件可写，即处于可发生网络包的状态

    unsigned         accept:1;         //事件可建立新连接

    unsigned         instance:1;       //区分当前事件是否过期，用于事件驱动模块（如epoll）

    unsigned         active:1;         //当前事件是活跃的

    unsigned         ready:1;          //当前事件是否准备就绪

    /* aio operation is complete */
    unsigned         complete:1;

    unsigned         eof:1;            //当前处理的字节流已经结束

    unsigned         error:1;          //事件在处理过程中出错

    unsigned         timedout:1;       //事件已经超时
    unsigned         timer_set:1;

    unsigned         delayed:1;        //延迟处理改事件，用于限速功能

    unsigned         deferred_accept:1;//延迟建立TCP连接，三次握手后不建立连接，到真正收到数据包时建立

    unsigned         available:1;      //一次尽可能多地建立TCP连接，与multi_accecpt对应

    ngx_event_handler_pt  handler;     //事件处理函数，每个事件消费模块都会重新实现它*****

    ngx_log_t       *log;              //用于记录error_log日志

    ngx_rbtree_node_t   timer;         //定时器

    /* the links of the posted queue */
    ngx_event_t     *next;
    ngx_event_t    **prev;

    //其他标志位成员，省略...
};

事件是不需要创建的，Nginx在启动时已经在ngx_cycle_t结构的read_events成员中预分配了所有的读事件，在write_events成员中预分配了所有的写事件。

Nginx封装的两个简单方法用于在事件驱动模块中添加或者移除事件：
ngx_int_t ngx_handle_read_event(ngx_event_t *rev, ngx_uint_t flags);
ngx_int_t ngx_handle_write_event(ngx_evnet_t *wev, size_t lowat);

=====================

connection结构

被动连接/主动连接 (ngx_connection_t/ngx_peer_connection_t)
struct ngx_connection_t {
    void               *data;           //连接池中空闲连接链表的next指针，或者ngx_http_request_t请求
    ngx_event_t        *read;           //连接对应的读事件
    ngx_event_t        *write;          //连接对应的写事件

    ngx_socket_t        fd;             //连接套接字句柄

    ngx_recv_pt         recv;           //直接接收网络字符流的方法
    ngx_send_pt         send;           //直接发送网络字符流的方法
    ngx_recv_chain_pt   recv_chain;     //以ngx_chain_t链表为参数接收网络字符流的方法
    ngx_send_chain_pt   send_chain;     //以ngx_chain_t链表为参数发送网络字符流的方法

    ngx_listening_t    *listening;      //监听对象

    off_t               sent;           //已经发送出去的字节数

    ngx_log_t          *log;            //用于记录日志

    ngx_pool_t         *pool;           //连接内存池

    struct sockaddr    *sockaddr;       //连接客户端sockaddr结构
    socklen_t           socklen;
    ngx_str_t           addr_text;      //连接客户端IP地址
    struct sockaddr    *local_sockaddr; //本机sockaddr结构

    ngx_buf_t          *buffer;         //用于接收、缓存客户端发来的字符流，大小可配置

    ngx_queue_t         queue;

    ngx_atomic_uint_t   number;         //连接使用次数

    ngx_uint_t          requests;       //处理的请求次数

    unsigned            buffered:8;     //缓存中的业务类型

    unsigned            log_error:3;    //记录日志级别

    unsigned            single_connection:1; //从客户端发起的的独立连接
    unsigned            timedout:1;     //连接已超时
    unsigned            error:1;        //连接处理过程中出现错误
    unsigned            destroyed:1;    //TCP连接已销毁

    unsigned            idle:1;         //连接处于空闲状态
    unsigned            reusable:1;     //连接可重用
    unsigned            close:1;        //连接已关闭

    unsigned            sendfile:1;     //正在发送数据
    unsigned            sndlowat:1;     //发送缓冲区必须满足最低设置阈值，事件驱动模块才会分发该事件
    unsigned            tcp_nodelay:2;   /* ngx_connection_tcp_nodelay_e */
    unsigned            tcp_nopush:2;    /* ngx_connection_tcp_nopush_e */

    //其他成员省略...
};

struct ngx_peer_connection_t {
    ngx_connection_t                *connection;    //重用connection

    struct sockaddr                 *sockaddr;      //远端服务器的sockaddr结构
    socklen_t                        socklen;
    ngx_str_t                       *name;          //远端服务器名称

    ngx_uint_t                       tries;         //连接失败重试次数

    ngx_event_get_peer_pt            get;           //获取连接
    ngx_event_free_peer_pt           free;          //释放链接
    void                            *data;          //用于get/free的参数

    ngx_addr_t                      *local;         //本机地址信息

    int                              rcvbuf;        //接收缓冲区大小

    ngx_log_t                       *log;           //用于记录日志

    unsigned                         cached:1;      //connection连接已缓存

    unsigned                         log_error:2;   //记录日志级别

    //其他成员省略...
};

======================

