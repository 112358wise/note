使用webbench进行压力测试
webbench -c 200 -t 60 http://down.chinaz.com/index.php
-c 并发数
-t 持续时间（秒）

ab stands for apache bench
ab [options] [http[s]://]hostname[:port]/path
-n 请求数
-c 并发数
-t 持续时间


事件模块

nginx把不同操作系统的IO模型抽象封装成ngx_event_module_t.actions中指定的钩子。
typedef struct {
    ngx_int_t  (*add)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t  (*del)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t  (*enable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);
    ngx_int_t  (*disable)(ngx_event_t *ev, ngx_int_t event, ngx_uint_t flags);

    ngx_int_t  (*add_conn)(ngx_connection_t *c);
    ngx_int_t  (*del_conn)(ngx_connection_t *c, ngx_uint_t flags);

    ngx_int_t  (*process_changes)(ngx_cycle_t *cycle, ngx_uint_t nowait);
    ngx_int_t  (*process_events)(ngx_cycle_t *cycle, ngx_msec_t timer,
                   ngx_uint_t flags);

    ngx_int_t  (*init)(ngx_cycle_t *cycle, ngx_msec_t timer);
    void       (*done)(ngx_cycle_t *cycle);
} ngx_event_actions_t;

typedef struct {
    ngx_str_t            *name;

    void                 *(*create_conf)(ngx_cycle_t *cycle);
    char                 *(*init_conf)(ngx_cycle_t *cycle, void *conf);

    ngx_event_actions_t     actions;
} ngx_event_module_t;

worker 初始化的时候会调用actions.init钩子初始化IO模型，比如在epoll的init钩子会创建epoll句柄和事件队列；之后worker就可 以在监听套接口上添加对连接建立状态的监听事件，调用accept获取已连接套接口，在已连接套接口上添加对读写操作的监听事件，nginx会调用 actions.process_events钩子轮询和处理事件，轮询有超时设定。

epoll
epoll_create(): 产生一个epoll对象，返回指向该epoll对象的文件描述符
epoll_ctl(): 将感兴趣的文件描述符注册到epoll对象
epoll_wait(): 等待事件发生

调用epoll_create建立一个epoll对象（在epoll文件系统中给这个句柄分配资源）、调用epoll_ctl向epoll对象中添加这100万个连接的套接字、调用epoll_wait收集发生事件的连接。

调用epoll_create方法，linux内核会创建一个eventpoll结构体，包含两个成员双向链表rdllist和红黑树根节点rbr。rdllist保存通过epoll_wait返回给用户的满足条件的事件，rbr存储所有通过epoll_ctl添加到epoll中的事件。在epool中，对于每一个事件都会建立一个epitem结构体，rdllist和rbr就是基于epitem中的rdllink和rbn成员组织的。

